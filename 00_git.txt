-----[account01]-----
ID   : nuron1359
PW   : lukeanakin4089
MAIL : masato.meiji0@gmail.com


-----[account02]-----
ID   : cyber-takeuchi
PW   : cyber20200106
MAIL : takeuchi@cybersolutions.co.jp


-----[startup]-----
□Githubの要素について
1.作業ディレクトリ
2.ステージングエリア（index）
3.リポジトリ（local/remote）

-----[command]-----
git config --global user.name "nuron1359"
git config --global user.email "masato.meiji0@gmail.com"
git config --global color.ui true
git config -l

1.git起動
git init
→ファイル編集を行う場所を定める（一番最初に実行）


2.git監視下へ配置
git add index.html
git add .
→インデックス化を行う（ローカルリポジトリテーブルに配置する前段階）
 ※引数に「.」を指定することで、カレントディレクトリ配下に存在するファイル全てをインデックス化する


3.コミット
git commit
git commit -m "commit test"
git commit -a
→コミットを行う（変更対象のファイルをローカルリポジトリに配置）
 ※「-m」オプションを指定することでメッセージを追記してコミットを行う
 ※「-a」オプションを指定することでインデックス化(git add)の工程と合わせてコミットを行う


4.プッシュ
git push
git push origin master
→プッシュを行う（変更対象のファイルをリモートリポジトリテーブルに配置）
 ※「origin」：リポジトリの場所の別名
 ※「master」：ブランチの名前(作業場所)
 *例：originという名前のリポジトリのmasterという名前の作業場所にpushする*


5.フェッチ


6.ブランチ
git branch CLOUD-4656
→新しいブランチ(作業場所)を作成

git branch
  CLOUD-4656
* master
→現在の作業場所を表示（*が付与されているブランチが現在のブランチを意味する）

git checkout CLOUD-4656
→指定したブランチへ移動

★git checkout -b CLOUD-4444
→新しいブランチを作成し、且つ同時に新規作成したブランチへ移動する

git checkout master
→指定したブランチへ移動した後、再度masterブランチへ移動(戻る)

git branch -d CLOUD-4656
→指定したブランチを削除する

※【補足事項】コミットし忘れている状態で移動/削除を行おうとするとエラーになる


7.マージ
git merge CLOUD-4656
→masterブランチとは別ブランチで作成されたファイルをmasterブランチ内へ取り込む

【*重要* コミットが衝突するケース】
Aブランチ、Bブランチそれぞれ別々のブランチで、
同一ファイルを編集→インデックス化→コミットした場合に生じる競合を意味する

①編集ファイルをviコマンドで開く
②競合箇所が明示的に示されているため、A/Bどちらを採用するか、0から記述し直すかを選択する
③編集後、ファイルを保存し、インデックス化→コミットとすればOK




8.スタッシュ


9.フォーク


10.クローン
git clone https://github.com/nuron1359/git-site.git



-----
□その他便利コマンド
$ git log
commit d176722c50bd6d94f169ea0502c79b03752fd985 (HEAD -> master)・・・・・gitユニークID
Author: cyber-takeuchi <takeuchi@cybersolutions.co.jp>・・・・・・・・・・コミット実行ユーザ
Date:   Fri Jun 26 15:32:23 2020 +0900・・・・・・・・・・・・・・・・・・コミット実行日時

    first commit・・・・・・・・・・・・・・・・・・・・・・・・・・・・・コミットメッセージ


git log --stat
→どのファイルが何ヵ所変更されたかを確認


git status
→現在の作業状況を簡易的に表示（●●を変更している最中）


★git checkout -- 01_test-index.html
→作業ファイルを編集前の状態に戻す


★git diff
diff --git a/01_test-index.html b/01_test-index.html
index 89b24ec..fe02a36 100644
--- a/01_test-index.html
+++ b/01_test-index.html
@@ -1 +1,2 @@
 line 1
+line 23456789・・・・・変更した箇所を明示的に表示（ステージングエリアに上げる前のみ使用可能）


★ git diff --cached
→ステージングエリア => 【ここで使用可能】 =>コミット


★git rm -f 02_test-index.html
→ステージング後、またはコミット後のファイルを削除する際に使用
※一度gitの管理下に配置されたファイルはgitの削除コマンドで処理することが推奨されている


★git commit --amend
→直前のコミットの変更を行う（無駄なログが出力されないといった利点がある）


★git reset --hard HEAD
→インデックス化した後に直前の作業に戻りたい場合に使用


★git reset --hard HEAD^
→reset でロールバックした後に更にもう1工程前の作業に戻る際に使用（^はIDに置き換えても可能）

git tag
→タグが付与されているコミットの一覧を表示

git tag v1.0
→直前のコミットに任意のタグを付与する

git show
→現在コミットしているファイルを全て表示する

git show v1.0
→現在コミットしているファイルの中で指定したタグのみ表示する




-----[実際の流れ]-----
<基本>
①ソースコードをクローンする
②ソースコードを編集する
③ソースコードをインデックス化する（git管理下に配置する）
④ソースコードをローカルリポジトリへコミットする
⑤ソースコードをリモートリポジトリへプッシュする

<応用>
①Master側で編集要請がある
②この後の流れが認識で来ていない（まず何をする必要がある??クローンして際プッシュでいいの??）








